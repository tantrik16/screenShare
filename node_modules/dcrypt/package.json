{
  "name": "dcrypt",
  "description": "extended openssl bindings",
  "keywords": [
    "crypt",
    "crypto",
    "dcrypt",
    "openssl"
  ],
  "version": "0.0.2",
  "author": {
    "name": "Jacob Evans",
    "email": "dcrypt@dekz.net"
  },
  "licences": [
    {
      "type": "FEISTY",
      "url": "http://github.com/feisty/license/raw/master/LICENSE"
    }
  ],
  "contributors": [
    {
      "name": "Jacob Evans",
      "email": "jacob@dekz.net"
    }
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/dekz/dcrypt.git",
    "private": "git@github.com:dekz/dcrypt.git",
    "web": "https://github.com/dekz/dcrypt"
  },
  "bugs": {
    "url": "https://github.com/dekz/dcrypt/issues"
  },
  "main": "./dcrypt.js",
  "dependencies": {
    "coffee-script": ">= 0.9.5 < 1.1.0"
  },
  "engines": {
    "node": ">= 0.4.2 < 0.5.0",
    "npm": ">= 0.3.15 < 1.1.0"
  },
  "readme": "                                                                 \n           _|                                            _|      \n       _|_|_|    _|_|_|  _|  _|_|  _|    _|  _|_|_|    _|_|_|_|  \n     _|    _|  _|        _|_|      _|    _|  _|    _|    _|      \n     _|    _|  _|        _|        _|    _|  _|    _|    _|      \n       _|_|_|    _|_|_|  _|          _|_|_|  _|_|_|        _|_|  \n                                         _|  _|                  \n                                     _|_|    _|                  \n\n\n\n\ndcrypt\n=======\n\nOpenssl bindings for Node.js. Written in Coffeescript.\n\n* RSA/ECDSA key generation\n* RSA/ECDSA key primitives from parsing key files\n* Random Bytes\n* Signing and verification using PEM encoded keys, not just certificates\n* Random bytes using openssl RAND\n* Hashing\n* Encryption and Decryption with all Ciphers supported in OpenSSL, as well as RSA encryption and decryption\n* x509 Certificate Reading\n\nInstall\n-------\n    npm install dcrypt\n\n\nUsage\n-----\nCreate a buffer holding 16 bytes of random data:\n\n    buffer = dcrypt.random.randomBytes(16)\n    >> <Buffer 46 65 82 15 c9 db 20 2d ea 2c fc 4c a2 0b 62 6a>\n\nCreate a new RSA Key Pair - no params is 1024 bytes and 65537 exponent default\n\n    rsa = new dcrypt.keypair.newRSA(1024, 65537)\n    >> { pem_pub: '-----BEGIN RSA PUBLIC KEY-----\\nMIGJAoGBAL3oiAw++hlc1Fo5hgph7uzawpP7H394VrL/UQ5eX96dSD+xznd4HHBH\\niv1ev8g7xIdsSCWa2xQ8xsSMiUawWiOp3ioC35xLWzmLthDxY9+WPVSE6XNCODda\\njlJ8xmQdoKKy2y1Hd5407SDXiLoBelpx5xgMIA7qLBUX1UmYGxchAgMBAAE=\\n-----END RSA PUBLIC KEY-----',\n    ...\n\nCreate a new ECDSA Key Pair - no params is default secp256k1 curve\n\n    ecdsa = new dcrypt.keypair.newECDSA('secp256k1')\n    >> { pem_pub: '-----BEGIN PUBLIC KEY-----\\nMIH1MIGuBgcqhkjOPQIBMIGiAgEBMCwGByqGSM49AQECIQD/////////////////\\n///////////////////+///8LzAGBAEABAEHBEEEeb5mfvncu6xVoGKVzocLBwKb\\n/NstzijZWfKBWxb4F5hIOtp3JqPEZV2k+/wOEQio/Re0SKaFVBmcR9CP+xDUuAIh\\nAP////////////////////66rtzmr0igO7/SXozQNkFBAgEBA0IABEi6/jVsROmi\\nZGQPulg4uW4//uru4oMtEt5O7KrAtvlGd9cRcCB2CO6DM98hz3QSRvmqa5hl4P1N\\nV4+C0CUFDLI=\\n-----END PUBLIC KEY-----'\n    ...\n\nVerify a signature with just a public key in PEM format\n\n    verified = verifer.verify(pem_public, signature, signature_format='hex')\n    >> true\n\nEncrypt and Decrypt with RSA\n\n    enc = dcrypt.rsa.encrypt(pub, 'Hi there RSA', 'RSA_PKCS1_PADDING', 'hex')\n    clear_msg = dcrypt.rsa.decrypt(priv, enc, 'RSA_PKCS1_PADDING', 'hex')\n    >> 'Hi there RSA'\n    \nEncrypt a message with AES and a phrase\n\n    cipher = dcrypt.cipher.createCipher('AES-256-cbc', 'This is a key')\n    ciphertext = cipher.update('Hello there', 'utf8', 'hex')\n    ciphertext += cipher.final('hex')\n\nDecrypt a message with AES and a phrase\n\n    decipher = dcrypt.decipher.createDecipher('AES-256-cbc', 'This is a key')\n    cleartext = cipher.update(ciphertext, 'hex', 'utf8')\n    cleartext += cipher.final('utf8')\n    >> 'Hello there'\n\nParse a RSA private key file and generate primitives\n\n    keypair.parseRSA(fs.readFileSync('/path/to/rsa.priv'), false)\n    >> { pub:\n         { n: 'BA5570689BDA43E4DBCE11DD9F33251C0B0E19B52D1B5BB6AEEA6C9EA09543BCC0ACC0DEAF1E416DB2B6E466A6C063FEE2DB7914EFD2B02765999D0D7AED119392AD65CD994195DE7D92B241CA588508BAFA12819F4037F6C7F71E77D2D66B2B9ECE9D2502AB65AB3C5B5D27613F9CA7E067C4496B9B881A62FACC6F68494341',\n           e: '010001' }, ...\n\nParse an x509 certificate\n\n    certPem = fs.readFileSync('test_cert.pem', 'ascii')\n    cert = dcrypt.x509.parse(certPem)\n    >>  { subject: '/C=UK/ST=Acknack Ltd/L=Rhys Jones/O=node.js/OU=Test TLS Certificate/CN=localhost',\n        issuer: '/C=UK/ST=Acknack Ltd/L=Rhys Jones/O=node.js/OU=Test TLS Certificate/CN=localhost',\n        version: 3,\n        serial: 'a2:f4:50:6f:a6:46:44:8f',\n        valid_from: 'Nov 11 09:52:22 2009 GMT',\n        valid_to: 'Nov  6 09:52:22 2029 GMT',\n        public_key_algo: 'rsaEncryption',\n        signature_algorithm: 'sha1WithRSAEncryption', ...\n \nTODO\n----\n* Finish porting HMAC\n* x509 certificates\n* CSR\n\nConfigure Options\n-----\nBuild without ECDSA bindings\n    node-waf configure --without-ecdsa=true\n\nINFO\n-----\nUse OpenSSL 1.0.0\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/dekz/dcrypt",
  "_id": "dcrypt@0.0.2",
  "dist": {
    "shasum": "67fa61551158f8ee9b64b3979d8e9db384c57a95"
  },
  "_from": "dcrypt@0.0.2",
  "_resolved": "https://registry.npmjs.org/dcrypt/-/dcrypt-0.0.2.tgz"
}
